package com.vinylteam.vinyl.security.impl;

import com.vinylteam.vinyl.entity.Role;
import com.vinylteam.vinyl.entity.User;
import com.vinylteam.vinyl.security.SecurityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.*;

public class DefaultSecurityService implements SecurityService {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    private final Random random = new SecureRandom();
    private final SecretKeyFactory secretKeyFactory;
    private final String algorithm = "PBKDF2WithHmacSHA512";

//    private List<Session> sessionList = new ArrayList<>();

    {
        logger.debug("Started initializer in DefaultSecurityService");
        try {
            secretKeyFactory = SecretKeyFactory.getInstance(algorithm);
        } catch (NoSuchAlgorithmException e) {
            logger.error("Error during initialisation of secretKeyFactory", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public String hashPassword(char[] password, byte[] salt, int iterations) {
        try {
            PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, iterations, 256);
            Arrays.fill(password, '\u0000');
            SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);
            logger.debug("Generated secretKey from pbeKeySpeck");
            byte[] result = secretKey.getEncoded();
            logger.debug("Encoded password into hash");
            return Base64.getEncoder().encodeToString(result);
        } catch (InvalidKeySpecException e) {
            logger.error("Error during hashing password", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public byte[] generateSalt() {
        byte[] salt = new byte[20];
        random.nextBytes(salt);
        logger.debug("Generated byte array with salt");
        return salt;
    }

    @Override
    public User createUserWithHashedPassword(String email, char[] password) {
        byte[] salt = generateSalt();
        int iterations = 10000;
        String hashedPassword = hashPassword(password, salt, iterations);
        User user = new User();
        user.setEmail(email);
        user.setPassword(hashedPassword);
        user.setSalt(Base64.getEncoder().encodeToString(salt));
        user.setIterations(iterations);
        user.setRole(Role.USER);
        user.setStatus(false);
        logger.debug("Resulting user is {'user':{}}", user);
        return user;
    }

    @Override
    public boolean checkPasswordAgainstUserPassword(User user, char[] password) {
        boolean isSame = false;
        if (user != null) {
            isSame = (user.getPassword().equals(hashPassword(password,
                    Base64.getDecoder().decode(user.getSalt()), user.getIterations())));
            logger.debug("Compared hash of passed password against user's hashed password");
        }
        logger.debug("Result of comparing password against user's password is {'isSame': {}, 'user':{}}", isSame, user);
        return isSame;
    }

//    @Override
//    public Session addSession(User user) {
//        Session session = new Session();
//        session.setToken(UUID.randomUUID().toString());
//        session.setUser(user);
//        session.setExpireDate(LocalDateTime.now().plusHours(3));
//        sessionList.add(session);
//        return session;
//    }
//
//    @Override
//    public void delSession(String token) {
//        for(Session session : sessionList){
//            if (session.getToken().equals(token)){
//                sessionList.remove(session);
//                break;
//            }
//        }
//    }
//
//    @Override
//    public Session getSession(String token){
//        for(Session session : sessionList){
//            if (session.getToken().equals(token)){
//                //it doesn't check
//                if (session.getExpireDate().compareTo(LocalDateTime.now())<0){
//                    sessionList.remove(session);
//                    break;
//                }
//                return session;
//            }
//        }
//
//        return null;
//    }
//
//    @Override
//    public String getRole(Cookie[] cookies){
//        String userRole = null;
//        if (cookies != null) {
//            for (Cookie cookie : cookies) {
//                if (cookie.getName().equals("user-token")) {
//                    String token = cookie.getValue();
//                    Session session = getSession(token);
//                    if (session != null) {
//                        Role role = session.getUser().getRole();
//                        userRole = String.valueOf(role);
//                    }
//                    break;
//                }
//            }
//        }
//        return userRole;
//    }

}
